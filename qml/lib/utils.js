
/**
 * Function : dump()
 * Arguments: The data - array,hash(associative array),object
 *    The level - OPTIONAL
 * Returns  : The textual representation of the array.
 * This function was inspired by the print_r function of PHP.
 * This will accept some data as the argument and return a
 * text that will be a more readable version of the
 * array/hash/object that is given.
 * Docs: http://www.openjs.com/scripts/others/dump_function_php_print_r.php
 */
function dump(arr,level) {
    var dumped_text = "";
    if(!level) level = 0;

    //The padding given at the beginning of the line.
    var level_padding = "";
    for(var j=0;j<level+1;j++) level_padding += "    ";

    if(typeof(arr) == 'object') { //Array/Hashes/Objects
        for(var item in arr) {
            var value = arr[item];

            if(typeof(value) == 'object') { //If it is an array,
                dumped_text += level_padding + "'" + item + "' ...\n";
                dumped_text += dump(value,level+1);
            } else {
                dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";
            }
        }
    } else { //Stings/Chars/Numbers etc.
        dumped_text = "===>"+arr+"<===("+typeof(arr)+")";
    }
    return dumped_text;
}

// https://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object
function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }

    /*
    copy.length = function() {
        return Object.keys(copy).length;
    }
    */

    return copy;
}

/*
    Qt RichText Label field does supports only a subset of HTML/CSS syntax
    This function (tries) to convert HTML tree (generated by HTMLParser) into
    Richtext string.

    see ...
 */
function html2qt(tag, attrs) {
    var content = '<' + tag;

    // color: orange or coral
    if (tag === 'a') {
        content += ' href="'+ attrs.href.value +'"' +
                ' style="text-decoration: none; color: coral; font-weight: bold"';
    } else if (tag === 'em') {
        content += ' style="color: grey"';
    } else if (tag === 'img') {
        content += ' src="'+ attrs.src.value+'"';
    } else if (tag === 'div' && 'class' in attrs && attrs.class.value === 'quote_bloc') {
        content += ' style="margin-left: 20px"';
    }

    if (tag === 'img') {
        content += '/';
    }

    content += '>';
    return content;
}
